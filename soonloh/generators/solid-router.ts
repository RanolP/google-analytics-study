import type { CodeGenerator, inferSegment } from 'soonloh';
import type { snzrwm } from 'soonloh/builtin-parsers';
import path from 'node:path';
import type { RouteNode } from '../util.ts';
import { makeRouteTree } from '../util.ts';

type CommonSegment = inferSegment<(typeof snzrwm)['segments']>;

interface Options {
  root: string;
  targetPath?: (pathSafeBranch: string) => string;
}
export function genSolidRouter({
  root,
  targetPath = () => 'src/shared/routes/definition.ts',
}: Options): CodeGenerator<CommonSegment> {
  return {
    name: 'solid-router',
    targetPath,
    generate(routes) {
      const tree = makeRouteTree(routes);

      const generateRoute = (
        { namedRouteFiles: { layout, ...namedRouteFiles }, ...node }: RouteNode,
        indent: number
      ) => {
        if (layout) {
          return [
            `{`,
            `  path: ${JSON.stringify(['/'])},`,
            `  component: lazy(() => import(${JSON.stringify(
              path.posix.join(root, layout.filePosix)
            )})),`,
            `  children: [`,
            generateRoute({ namedRouteFiles, ...node }, indent + 1),
            `  ],`,
            `},`,
          ]
            .filter(Boolean)
            .flatMap((s) => s.split('\n'))
            .map((s) => '  '.repeat(indent) + s)
            .join('\n');
        }
        const route = (() => {
          switch (node.segment.kind) {
            case 'grouping':
            case 'terminator':
              return ['/'];
            case 'static':
              return [node.segment.path];
            case 'param':
              if (node.segment.catchall) {
                return [`*${node.segment.name}`];
              } else if (node.segment.optional) {
                return [`:${node.segment.name}?`];
              } else {
                return [`:${node.segment.name}`];
              }
          }
        })();
        return [
          `{`,
          `  path: ${JSON.stringify(route)},`,
          namedRouteFiles.page &&
            `  component: lazy(() => import(${JSON.stringify(
              path.posix.join(root, namedRouteFiles.page.filePosix)
            )})),`,
          ...(Object.values(node.children).length > 0
            ? [
                `  children: [`,
                ...Object.values(node.children).map((child) =>
                  generateRoute(child, indent)
                ),
                `  ],`,
              ]
            : []),
          `},`,
        ]
          .filter(Boolean)
          .flatMap((s) => s.split('\n'))
          .map((s) => '  '.repeat(indent) + s)
          .join('\n');
      };
      return [
        `// WARNING: do not edit this file directly`,
        `//          the content is auto-generated.`,
        ``,
        `import { lazy } from 'solid-js'`,
        `import type { RouteDefinition } from '@solidjs/router'`,
        ``,
        `export const GeneratedRoutes = [`,
        generateRoute(tree.root, 1),
        `] satisfies RouteDefinition[];`,
        ``,
      ].join('\n');
    },
  };
}
